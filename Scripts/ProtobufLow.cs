// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf_low.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protobuf_low.proto</summary>
public static partial class ProtobufLowReflection {

  #region Descriptor
  /// <summary>File descriptor for protobuf_low.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtobufLowReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJwcm90b2J1Zl9sb3cucHJvdG8irwEKA01zZxIOCgZvcHR5cGUYASABKAUS",
          "EAoIdXNlcm5hbWUYAiABKAkSDwoHdXNlcnB3ZBgDIAEoCRIMCgRwb3N4GAQg",
          "ASgCEgwKBHBvc3kYBSABKAISDAoEcG9zehgGIAEoAhIMCgRyb3R4GAcgASgC",
          "EgwKBHJvdHkYCCABKAISDAoEcm90ehgJIAEoAhINCgVmcmFtZRgKIAEoBRIS",
          "CgpuZXh0YXR0YWNrGAsgASgFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Msg), global::Msg.Parser, new[]{ "Optype", "Username", "Userpwd", "Posx", "Posy", "Posz", "Rotx", "Roty", "Rotz", "Frame", "Nextattack" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Msg : pb::IMessage<Msg> {
  private static readonly pb::MessageParser<Msg> _parser = new pb::MessageParser<Msg>(() => new Msg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Msg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtobufLowReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Msg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Msg(Msg other) : this() {
    optype_ = other.optype_;
    username_ = other.username_;
    userpwd_ = other.userpwd_;
    posx_ = other.posx_;
    posy_ = other.posy_;
    posz_ = other.posz_;
    rotx_ = other.rotx_;
    roty_ = other.roty_;
    rotz_ = other.rotz_;
    frame_ = other.frame_;
    nextattack_ = other.nextattack_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Msg Clone() {
    return new Msg(this);
  }

  /// <summary>Field number for the "optype" field.</summary>
  public const int OptypeFieldNumber = 1;
  private int optype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Optype {
    get { return optype_; }
    set {
      optype_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userpwd" field.</summary>
  public const int UserpwdFieldNumber = 3;
  private string userpwd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Userpwd {
    get { return userpwd_; }
    set {
      userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "posx" field.</summary>
  public const int PosxFieldNumber = 4;
  private float posx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Posx {
    get { return posx_; }
    set {
      posx_ = value;
    }
  }

  /// <summary>Field number for the "posy" field.</summary>
  public const int PosyFieldNumber = 5;
  private float posy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Posy {
    get { return posy_; }
    set {
      posy_ = value;
    }
  }

  /// <summary>Field number for the "posz" field.</summary>
  public const int PoszFieldNumber = 6;
  private float posz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Posz {
    get { return posz_; }
    set {
      posz_ = value;
    }
  }

  /// <summary>Field number for the "rotx" field.</summary>
  public const int RotxFieldNumber = 7;
  private float rotx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotx {
    get { return rotx_; }
    set {
      rotx_ = value;
    }
  }

  /// <summary>Field number for the "roty" field.</summary>
  public const int RotyFieldNumber = 8;
  private float roty_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Roty {
    get { return roty_; }
    set {
      roty_ = value;
    }
  }

  /// <summary>Field number for the "rotz" field.</summary>
  public const int RotzFieldNumber = 9;
  private float rotz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotz {
    get { return rotz_; }
    set {
      rotz_ = value;
    }
  }

  /// <summary>Field number for the "frame" field.</summary>
  public const int FrameFieldNumber = 10;
  private int frame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Frame {
    get { return frame_; }
    set {
      frame_ = value;
    }
  }

  /// <summary>Field number for the "nextattack" field.</summary>
  public const int NextattackFieldNumber = 11;
  private int nextattack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Nextattack {
    get { return nextattack_; }
    set {
      nextattack_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Msg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Msg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Optype != other.Optype) return false;
    if (Username != other.Username) return false;
    if (Userpwd != other.Userpwd) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posx, other.Posx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posy, other.Posy)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posz, other.Posz)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotx, other.Rotx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roty, other.Roty)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotz, other.Rotz)) return false;
    if (Frame != other.Frame) return false;
    if (Nextattack != other.Nextattack) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Optype != 0) hash ^= Optype.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
    if (Posx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posx);
    if (Posy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posy);
    if (Posz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posz);
    if (Rotx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotx);
    if (Roty != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roty);
    if (Rotz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotz);
    if (Frame != 0) hash ^= Frame.GetHashCode();
    if (Nextattack != 0) hash ^= Nextattack.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Optype != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Optype);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Userpwd.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Userpwd);
    }
    if (Posx != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Posx);
    }
    if (Posy != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Posy);
    }
    if (Posz != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Posz);
    }
    if (Rotx != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Rotx);
    }
    if (Roty != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(Roty);
    }
    if (Rotz != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(Rotz);
    }
    if (Frame != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Frame);
    }
    if (Nextattack != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Nextattack);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Optype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Optype);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Userpwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
    }
    if (Posx != 0F) {
      size += 1 + 4;
    }
    if (Posy != 0F) {
      size += 1 + 4;
    }
    if (Posz != 0F) {
      size += 1 + 4;
    }
    if (Rotx != 0F) {
      size += 1 + 4;
    }
    if (Roty != 0F) {
      size += 1 + 4;
    }
    if (Rotz != 0F) {
      size += 1 + 4;
    }
    if (Frame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
    }
    if (Nextattack != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nextattack);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Msg other) {
    if (other == null) {
      return;
    }
    if (other.Optype != 0) {
      Optype = other.Optype;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Userpwd.Length != 0) {
      Userpwd = other.Userpwd;
    }
    if (other.Posx != 0F) {
      Posx = other.Posx;
    }
    if (other.Posy != 0F) {
      Posy = other.Posy;
    }
    if (other.Posz != 0F) {
      Posz = other.Posz;
    }
    if (other.Rotx != 0F) {
      Rotx = other.Rotx;
    }
    if (other.Roty != 0F) {
      Roty = other.Roty;
    }
    if (other.Rotz != 0F) {
      Rotz = other.Rotz;
    }
    if (other.Frame != 0) {
      Frame = other.Frame;
    }
    if (other.Nextattack != 0) {
      Nextattack = other.Nextattack;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Optype = input.ReadInt32();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Userpwd = input.ReadString();
          break;
        }
        case 37: {
          Posx = input.ReadFloat();
          break;
        }
        case 45: {
          Posy = input.ReadFloat();
          break;
        }
        case 53: {
          Posz = input.ReadFloat();
          break;
        }
        case 61: {
          Rotx = input.ReadFloat();
          break;
        }
        case 69: {
          Roty = input.ReadFloat();
          break;
        }
        case 77: {
          Rotz = input.ReadFloat();
          break;
        }
        case 80: {
          Frame = input.ReadInt32();
          break;
        }
        case 88: {
          Nextattack = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
